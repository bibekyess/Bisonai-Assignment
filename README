*Content Description*
Raw data folder contains the data source
static/styles contains the css file source
templates contain the html file source
app.py is the main python file source
Processed data folder contains the data used in plotting the plots
Procfile and requirements.txt are the files used in deploying the application

*Generating Data:*
I made use of google colab notebook to generate the false data. You can find the data used in 'Raw data' folder. Then again using, google colab, I did data preprocessing and downloaded 4 datasets for plotting our desired graph. Since, I just needed fake data, for TVL, I used sum() and for Volume 24H, I used average() of data values.

*Passing data:*
I have used flask to make the server and used python to fetch the data and then pass it to html file. Doing this, in future, if any preprocessing, is still required then one can easily do it using python.

*Line chart:*
For line chart, we only require 1 dataset. Firstly, I appended svg element to the specified drawing position on html and then made x and y scales and appended each axes to the svg element. I wanted to color the area below the graph so I used d3.area() and I used gradient color wrt y-scale. Then using d3.line(), I added line too in the svg. Then, the difficult part was adding tooltip to the plot as mouse hovers. So, I made one vertical line and circle elements and then use append('svg:rect') on that vertical line to trak mouse movements on canvas. Then, I defined mouseout, mouseover functions accordingly and in mousemove, I used d3.pointer(event) to get the exact position of mouse on the canvas. Then I used xLine.invert() to get values in the range of our original dataset. Since, I wanted the line only to appear on the x-axis ticks, I made use of Math.round() to get the x-axis ticks labels. Another tricky part was since I used d3.curveBasis(), the position of y for x-value is not exactly as we provided on the dataset. So, needed to find out the y-value for the given x on the plotted curve to position the circle. So, I made use of .getPointAtLength() function to find out the position. Then finally, return the respective tooltip values.

*Bar chart:*
Here, I have three datasets, so I made use of update function that takes different datasets and update the curve accordingly. As line chart, firstly axes are added to svg element. Then I plotted two bar-charts. The blue one and the grey one. The grey bars only display on hovering. I made use of .bandwidth() to get width of bars to make sure that the grey bars look like the enlarged version of the blue one. The hovering features of the blue bars and grey bars are put same. Other different features like remove() and stroke-width:0 are used to remove the y-axis tick-labels and axis lines.

*Performance:*
I made use of bootstrap to make sure the width changes dynamically that it works fine on mobile devices, too. Also, since we have already preprocessed data using google colab, we are using updated dataframes which doesn't take much time to load.

*Overdelivery:*
To analyze and reach to a conclusion from the visualization plots, it is better to have more information. So, this plots doesn't seem to be more scalable/flexible. It is better to have a time slider on the bottom (which supports zooming and panning), so that user can select the time-frame they want to analyze by themselves. Adding, zooming and panning is better because for plots with small width and height, when we have large datasets, then there is chance of misleading conclusions as what we think is not a big increase maybe a big increase in the value. Also, adding a button element to choose specific year in barplot is better for high number of data.
Also, for weekly-chart, I felt the x-axis tick labels can be ore better. Like, it shows the starting day of the day only and it is difficult to know what that bar is showing until we hover to get the information. I would prefer to put (19-26) than just 19.

